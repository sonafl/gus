# Создание пустого списка 
my_list = []
my_list_1 = list() # функция list - конвертирует в список другие типы данных

# Создание списка с начальными значениями 
b = 130
list_1 = [1, 2.5, 'abc', True, b]

# Индексанция элементов списка - обращение к ним по номеру 
print(list_1[0]) # индексация считается с 0 
# Отрицательная индексация 
print(list_1[-2])
# Можем заменить элемент под определенным индексом 
list_1[0] = 2
# Перебор элементов списка
for item in list_1: # item - каждый элемент в списке 
    print(item)
# Перебор элементов списка с помощью range - вывод элементов-соседей
# for i in range(len(list_1) - этот цикл перебирает индексы элементов списка 
## len(list_1) = 5, range(5)
for i in range(len(list_1)-1): 
    print(list_1[i], list_1[i+1])
# когда i = 0, мы получим 1 и 2.5
# когда i = 1, мы получим 2.5 и abc
# i = 2, abc и True
# i = 3, True и 130

# Перебор элементов списка с помощью range - вывод элементов двух списков
list_2 = ['один', 'два', 'три']
list_3 = [1, 2, 3]
for i in range(len(list_2)):
     print(list_2[i], list_3[i])

# Получение длины списка - функция len 
print(len(list_1))

# Сумма элементов списка 
print(sum(list_3))

# Cреднее арифметическое 
print(sum(list_3) / len(list_3))

# Максимальное и минимальное 
print(max(list_3), min(list_3))

# Добавить элемент в конец списка 
list_1.append('def')

# Добавить новый элемент по индексу 
list_1.insert(0, 3) # можно добавить по несуществующему большему индексу, например, если индексов 5, написать 6

# Удаление конкретного элемента 
list_1.remove(3)
# Удаление элемента по индексу 
del list_1[0]

# Проверка наличия элемента в списке 
## in - ключевое слово для проверки принадлежности к чему-либо
if 2.5 in list_1:
    print('ok')

# Проверка что элемента нет в списке
if 6 not in list_1:
    print('not ok')

# Объединение двух списков - одинаковой длины 
list_2 = ['один', 'два', 'три']
list_3 = [1, 2, 3]
new_list = list_2 + list_3 
print(new_list)

# Сортировка cписка - 2 способа 
number_list = [17, 20, 3, 1]
# метод sort меняет в исходном списке
number_list.sort() # если в скобках написать reverse=True, будет сортировка по УБЫВАНИЮ
# функция sorted создает новый список
print(sorted(number_list)) # если в скобках после списка написать reverse=True, будет сортировка по УБЫВАНИЮ
numbers = sorted(number_list)

# Разворот списка
number_list.reverse()
print(number_list)




